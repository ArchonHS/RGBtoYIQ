# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


import urllib
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Button, Canvas, Entry, PhotoImage, Text, Tk, Toplevel, Label
from urllib import request

import numpy as np
import PIL
import skimage
from PIL import Image, ImageTk
from skimage import color, io

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def error_window():
    error = Toplevel(window)
    error.title("Error!")
    error.geometry("300x200")
    Label(
        error,
        text="Invalid URL or image format! \n Please, try again!",
        justify="center",
    ).pack(expand=True)
    Button(
        error, text="OK", relief="flat", command=error.destroy, borderwidth=0, font=("Bungee", 14 * -1), bg="#A5A6F6"
    ).pack(side="bottom", fill="x")    
    error.focus()


def convert():
    # getting image from internet
    try:
        img = PIL.Image.open(urllib.request.urlopen(entry_1.get()))
        img.save("original.png")
        img = np.asarray(PIL.Image.open("original.png"))
    except Exception:
        error_window()
    # converting arrays
    y_arr = skimage.color.rgb2yiq(np.asarray(img))
    for rows in y_arr:
        for pixels in rows:
            pixels[1] = 0
            pixels[2] = 0

    y_arr = skimage.color.convert_colorspace(y_arr, "YIQ", "RGB")
    skimage.io.imsave("y_arr.png", y_arr)

    # converting arrays
    i_arr = skimage.color.rgb2yiq(img)
    for rows in i_arr:
        for pixels in rows:
            pixels[0] = 0
            pixels[2] = 0

    i_arr = skimage.color.convert_colorspace(i_arr, "YIQ", "RGB")
    skimage.io.imsave("i_arr.png", i_arr)

    # converting arrays
    q_arr = skimage.color.rgb2yiq(img)
    for rows in q_arr:
        for pixels in rows:
            pixels[0] = 0
            pixels[1] = 0
    q_arr = skimage.color.convert_colorspace(q_arr, "YIQ", "RGB")
    skimage.io.imsave("q_arr.png", q_arr)

    # replacing empty images with converted ones
    img_1 = ImageTk.PhotoImage(image=(Image.fromarray(img)).resize((256, 256)))
    canvas.itemconfig(image_1, image=img_1)
    img_2 = ImageTk.PhotoImage(image=(Image.open("y_arr.png")).resize((256, 256)))
    canvas.itemconfig(image_2, image=img_2)
    img_3 = ImageTk.PhotoImage(image=(Image.open("i_arr.png")).resize((256, 256)))
    canvas.itemconfig(image_3, image=img_3)
    img_4 = ImageTk.PhotoImage(image=(Image.open("q_arr.png")).resize((256, 256)))
    canvas.itemconfig(image_4, image=img_4)
    window.mainloop()  # need to recall loop method for images to update


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("RGB to YIQ channels converter")
ico = PhotoImage(file=relative_to_assets("icon.png"))
window.iconphoto(True, ico)
window.geometry("1440x774")
window.configure(bg="#FFFFFF")


canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=774,
    width=1440,
    bd=0,
    highlightthickness=0,
    relief="ridge",
)

canvas.place(x=0, y=0)
canvas.create_rectangle(0.0, 0.0, 1440.0, 117.0, fill="#A5A6F6", outline="")

canvas.create_text(
    179.0,
    -21.0,
    anchor="nw",
    text="RGB to YIQ layers converter",
    fill="#000000",
    font=("Bungee", 64 * -1),
)

button_image_1 = PhotoImage(file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=convert,
    relief="flat",
)
button_1.place(x=92.0, y=688.0, width=124.0, height=44.0)

entry_image_1 = PhotoImage(file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(816.5, 710.0, image=entry_image_1)
entry_1 = Entry(bd=0, bg="#C4C4C4", highlightthickness=0)
entry_1.place(x=253.0, y=688.0, width=1127.0, height=42.0)

image_image_1 = PhotoImage(file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(222.0, 393.0, image=image_image_1)

image_image_2 = PhotoImage(file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(554.0, 393.0, image=image_image_2)

image_image_3 = PhotoImage(file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(886.0, 393.0, image=image_image_3)

image_image_4 = PhotoImage(file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(1218.0, 393.0, image=image_image_4)

canvas.create_text(
    172.0,
    232.0,
    anchor="nw",
    text="Original",
    fill="#000000",
    font=("Bungee", 18 * -1),
)

canvas.create_text(
    501.0,
    232.0,
    anchor="nw",
    text="Y channel",
    fill="#000000",
    font=("Bungee", 18 * -1),
)

canvas.create_text(
    833.0,
    232.0,
    anchor="nw",
    text="i channel",
    fill="#000000",
    font=("Bungee", 18 * -1),
)

canvas.create_text(
    1164.0,
    232.0,
    anchor="nw",
    text="q channel",
    fill="#000000",
    font=("Bungee", 18 * -1),
)
window.resizable(False, False)
window.mainloop()
